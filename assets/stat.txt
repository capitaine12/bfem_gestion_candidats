class DataLoaderThread(QThread):
    data_loaded = pyqtSignal(list)

    def run(self):
        logging.info("üì° Chargement des candidats...")
        candidats = get_all_candidats()
        self.data_loaded.emit(candidats)  # Envoi des donn√©es une fois r√©cup√©r√©es

class StatistiquesPage(QWidget):
    def __init__(self):
        super().__init__()
        self.setObjectName("statistiquesPage")
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        layout.setSpacing(15)  # Espacement global
        
        # üè∑Ô∏è Titre principal
        title = QLabel("üìä Statistiques des Candidats")
        title.setFont(QFont("Arial", 20, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # üóÇÔ∏è Conteneur des cartes
        self.cards_layout = QHBoxLayout()
        self.cards_layout.setSpacing(15)
        layout.addLayout(self.cards_layout)

        # üìä Zone scrollable pour les graphiques
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        content_widget = QWidget()
        self.content_layout = QVBoxLayout()
        self.content_layout.setSpacing(20)

        # üìå Initialisation des graphiques
        self.figure_pie = plt.figure(figsize=(7, 5))
        self.canvas_pie = FigureCanvas(self.figure_pie)
        self.add_graph(self.content_layout, "R√©partition des Statuts", self.canvas_pie)

        self.figure_bar = plt.figure(figsize=(7, 5))
        self.canvas_bar = FigureCanvas(self.figure_bar)
        self.add_graph(self.content_layout, "R√©partition des Candidats par Sexe", self.canvas_bar)

        self.figure_hist = plt.figure(figsize=(7, 5))
        self.canvas_hist = FigureCanvas(self.figure_hist)
        self.add_graph(self.content_layout, "Histogramme des Notes par Mati√®re", self.canvas_hist)

        content_widget.setLayout(self.content_layout)
        scroll_area.setWidget(content_widget)
        layout.addWidget(scroll_area)

        self.setLayout(layout)

        # üöÄ Chargement des donn√©es en arri√®re-plan
        self.load_data_async()

    def load_data_async(self):
        """Charge les donn√©es dans un thread s√©par√© pour √©viter de bloquer l'interface."""
        self.thread = DataLoaderThread()
        self.thread.data_loaded.connect(self.on_data_loaded)
        self.thread.start()

    def on_data_loaded(self, candidats):
        """Callback ex√©cut√© une fois que les donn√©es sont charg√©es."""
        logging.info("‚úÖ Donn√©es des candidats charg√©es !")
        self.traiter_candidats(candidats)
        self.update_graphics()

    def clear_layout(self, layout):
        """Supprime tous les widgets d'un layout."""
        while layout.count():
            item = layout.takeAt(0)
            widget = item.widget()
            if widget is not None:
                widget.deleteLater()

    def traiter_candidats(self, candidats):
        """Calcule les statistiques √† partir des candidats r√©cup√©r√©s."""
        self.clear_layout(self.cards_layout)  # üîÑ Supprime les anciennes cartes

        total_candidats = len(candidats)
        moyenne_generale = self.calculer_moyenne_generale(candidats)
        taux_reussite = self.calculer_taux_reussite(candidats)

        self.add_stat_card(self.cards_layout, "üìå Candidats", str(total_candidats))
        self.add_stat_card(self.cards_layout, "üéì Moyenne G√©n√©rale", f"{moyenne_generale:.2f}/20")
        self.add_stat_card(self.cards_layout, "‚úÖ Taux de R√©ussite", f"{taux_reussite:.2f}%")

    def calculer_moyenne_generale(self, candidats):
        """Calcule la moyenne g√©n√©rale des candidats."""
        total_moyenne = 0
        total_candidats = len(candidats)

        for candidat in candidats:
            num_table = candidat[0]
            notes_candidat = get_all_notes(num_table)

            if notes_candidat:
                notes_valides = [note for note in notes_candidat[1:] if note is not None]
                if notes_valides:
                    moyenne = sum(notes_valides) / len(notes_valides)
                    total_moyenne += moyenne

        return total_moyenne / total_candidats if total_candidats > 0 else 0

    def calculer_taux_reussite(self, candidats):
        """Calcule le taux de r√©ussite des candidats."""
        admis_count = sum(1 for candidat in candidats if candidat[-1] in ["Admis", "Admis Doffice"])
        total_count = len(candidats)

        return (admis_count / total_count * 100) if total_count > 0 else 0

    def add_stat_card(self, layout, title, value):
        """Ajoute une carte statistique avec ic√¥ne et mise en valeur."""
        card = QFrame()
        card.setStyleSheet("border: 2px solid #ff6600; border-radius: 10px; padding: 15px; background-color: #fff;")

        card_layout = QVBoxLayout()
        card_layout.setSpacing(5)

        label_title = QLabel(title)
        label_title.setFont(QFont("Arial", 12, QFont.Bold))
        label_title.setAlignment(Qt.AlignCenter)

        label_value = QLabel(value)
        label_value.setFont(QFont("Arial", 22, QFont.Bold))
        label_value.setAlignment(Qt.AlignCenter)

        card_layout.addWidget(label_title)
        card_layout.addWidget(label_value)
        card.setLayout(card_layout)
        layout.addWidget(card)

    def add_graph(self, layout, title, canvas):
        """Ajoute un graphique avec un titre soulign√©."""
        title_label = QLabel(f"<u>{title}</u>")
        title_label.setFont(QFont("Arial", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        layout.addWidget(canvas)

    def update_graphics(self):
        """Recharge les graphiques avec les nouvelles donn√©es."""
        logging.info("üîÑ Mise √† jour des graphiques...")

        self.figure_pie.clear()
        self.plot_pie_chart(self.figure_pie)
        self.canvas_pie.draw()

        self.figure_bar.clear()
        self.plot_bar_chart(self.figure_bar)
        self.canvas_bar.draw()

        self.figure_hist.clear()
        self.plot_histogram(self.figure_hist)
        self.canvas_hist.draw()

    def plot_pie_chart(self, figure):
        """Affiche la r√©partition des statuts en camembert."""
        candidats = get_candidats_avec_statut()
        labels = ["Admis", "Second Tour", "√âchou√©"]
        sizes = [sum(1 for c in candidats if c[-1] == label) for label in labels]
        colors = ['#4CAF50', '#FFC107', '#F44336']

        ax = figure.add_subplot(111)
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors, startangle=90)
        ax.axis('equal')